/**
	This multithreading primitive allows for any number of threads to safely access a shared object while avoiding illegal concurrent access.
	mutex();
	## Remarks:
		It is not safe for 2 threads to try accessing the same portion of memory at the same time, that especially becomes true when at least one of the threads performs any kind of updates to the memory. One of the common and widely used solutions to this problem is basically to create a lock condition where, if one thread starts modifying a bit of shared data, another thread which wants to access or also modify that data must first wait for the initial accessing thread to complete that data modification before continuing.
		The mutex class is one such method of implementing this mechanism. On the surface it is a simple structure that can be in a locked or unlocked state. If thread A calls the lock method on a mutex object which is already locked from thread B, thread A will block execution until thread B calls the unlock method of the mutex object which can then be successfully locked by thread A.
		This is the most basic mutex class, though there are other derivatives. Most mutex classes have the ability to try locking a mutex for up to a given timeout in milliseconds before returning false if a lock could not be acquired within the given timeout.
		Mutexes or most other threading primitives are not connected by default to any sort of data. You can use one mutex for 10 variables if you want and if it makes sense in your context.
		Remember, you are beginning to enter lower level and much more dangerous programming territory when dealing with multiple threads. If you accidentally forget to unlock a mutex when you are done with it for example, any thread that next tries locking that mutex will at the least malfunction but is much more likely to just hang your app forever. Be careful!
*/

// Example:
// globals
mutex ding_mutex; // To control exclusive access to a sound object.
sound snd;
thread_event exit_program(THREAD_EVENT_MANUAL_RESET);

// This function plays a ding sound every 250 milliseconds, the sleeping is handled by trying to wait for the thread exit event.
void dinging_thread() {
	while(!exit_program.try_wait(250)) {
		ding_mutex.lock();
		snd.seek(0);
		snd.play();
		ding_mutex.unlock();
	}
}

void main() {
	snd.load("C:/Windows/media/chord.wav");
	show_window("mutex example");
	// Start our function on another thread.
	async<void>(dinging_thread);
	while (!key_pressed(KEY_ESCAPE)) {
		wait(5);
		if (key_pressed(KEY_L)) {
			// This demonstrates that if we lock the mutex on the main thread, the ding sound pauses for a second while its own ding_mutex.lock() call waits for this thread to unlock the mutex.
			ding_mutex.lock();
			wait(1000);
			ding_mutex.unlock();
		}
		// A more real-world use case might be allowing the sounds volume to safely change.
		if (key_pressed(KEY_UP)) {
			mutex_lock exclusive(ding_mutex); // A simpler way to lock a mutex, the mutex_lock variable called exclusive gets deleted as soon as this if statement scope exits and the mutex is then unlocked.
			snd.volume += 1;
		} else if (key_pressed(KEY_DOWN)) {
			mutex_lock exclusive(ding_mutex);
			snd.volume -= 1; // We can be sure that these volume changes will not take place while the sound is being accessed on another thread.
		}
	}
	exit_program.set(); // Make sure the dinging_thread knows it is time to shut down.
}
